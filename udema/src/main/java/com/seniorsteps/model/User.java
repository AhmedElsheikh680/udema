package com.seniorsteps.model;
// Generated Nov 21, 2020 2:55:45 PM by Hibernate Tools 4.3.1


import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name="user"
    ,catalog="online_courses"
)
public class User  implements java.io.Serializable {


     private Integer id;
     private Lookup lookupByGenderId;
     private Lookup lookupByTypeId;
     private String address;
     private Integer age;
     private Date birthDate;
     private String firstName;
     private String lastName;
     private String password;
     private String username;
     private Instructor instructor;
     private Student student;

    public User() {
    }

    public User(Lookup lookupByGenderId, Lookup lookupByTypeId, String address, Integer age, Date birthDate, String firstName, String lastName, String password, String username, Instructor instructor, Student student) {
       this.lookupByGenderId = lookupByGenderId;
       this.lookupByTypeId = lookupByTypeId;
       this.address = address;
       this.age = age;
       this.birthDate = birthDate;
       this.firstName = firstName;
       this.lastName = lastName;
       this.password = password;
       this.username = username;
       this.instructor = instructor;
       this.student = student;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="ID", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="GENDER_ID")
    public Lookup getLookupByGenderId() {
        return this.lookupByGenderId;
    }
    
    public void setLookupByGenderId(Lookup lookupByGenderId) {
        this.lookupByGenderId = lookupByGenderId;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="TYPE_ID")
    public Lookup getLookupByTypeId() {
        return this.lookupByTypeId;
    }
    
    public void setLookupByTypeId(Lookup lookupByTypeId) {
        this.lookupByTypeId = lookupByTypeId;
    }

    
    @Column(name="ADDRESS")
    public String getAddress() {
        return this.address;
    }
    
    public void setAddress(String address) {
        this.address = address;
    }

    
    @Column(name="AGE")
    public Integer getAge() {
        return this.age;
    }
    
    public void setAge(Integer age) {
        this.age = age;
    }

    @Temporal(TemporalType.DATE)
    @Column(name="BIRTH_DATE", length=10)
    public Date getBirthDate() {
        return this.birthDate;
    }
    
    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }

    
    @Column(name="FIRST_NAME")
    public String getFirstName() {
        return this.firstName;
    }
    
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    
    @Column(name="LAST_NAME")
    public String getLastName() {
        return this.lastName;
    }
    
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    
    @Column(name="PASSWORD")
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }

    
    @Column(name="USERNAME")
    public String getUsername() {
        return this.username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }

@OneToOne(fetch=FetchType.LAZY, mappedBy="user")
    public Instructor getInstructor() {
        return this.instructor;
    }
    
    public void setInstructor(Instructor instructor) {
        this.instructor = instructor;
    }

@OneToOne(fetch=FetchType.LAZY, mappedBy="user")
    public Student getStudent() {
        return this.student;
    }
    
    public void setStudent(Student student) {
        this.student = student;
    }




}


